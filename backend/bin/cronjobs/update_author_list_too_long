#!/usr/bin/perl
#
# Copyright 2000, The Regents of The University of Michigan, All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

BEGIN
{
  require "strict.pm";
  strict::import();
}

# ----------------------------------------------------------------------
#               start of MAIN
# ----------------------------------------------------------------------

use DBI;
use File::Path;
use Mail::Mailer;


my $gDbName         = $ENV{'DB_NAME'};
my $gDbUser         = $ENV{'DB_USER'};
my $gDbPassword     = $ENV{'DB_PASSWORD'};
my $gDbService      = $ENV{'DB_SERVICE'};
my $gDbPort         = $ENV{'DB_PORT'};

my $gBaseDataDir    = $ENV{'BASE_DATA_DIR'};
my $gBaseBinDir     = $ENV{'BASE_BIN_DIR'};

my $dbhP = DBI->connect("dbi:Pg:dbname=$gDbName;host=$gDbService;port=$gDbPort", "$gDbUser", "$gDbPassword");


# ./dspace itemupdate -e blancoj@umich.edu -s /misc/meta_delete -d dc.type 2>&1 | tee outfile_delete
# ./dspace itemupdate -e blancoj@umich.edu -s /misc/meta -a dc.type 2>&1 | tee outfile_add


################## How to update the db: ##########################

#mv /misc/meta_delete/1 /misc/temp2/meta_delete
#mv /misc/meta_desc/1 /misc/temp2/meta_desc
#mv /misc/meta_author/1 /misc/temp2/meta_author

#mkdir meta_delete
#mkdir meta_desc
#mkdir meta_author

#./dspace itemupdate -e blancoj@umich.edu -s /misc/temp2/meta_delete -d dc.contributor.author 2>&1 | tee outfile_delete

#./dspace itemupdate -e blancoj@umich.edu -s /misc/temp2/meta_desc -a dc.description 2>&1 | tee outfile_add
#./dspace itemupdate -e blancoj@umich.edu -s /misc/temp2/meta_author -a dc.contributor.author 2>&1 | tee outfile_add

#To Do:

#./dspace itemupdate -e blancoj@umich.edu -s /misc/meta_delete -d dc.contributor.author 2>&1 | tee outfile_delete

#./dspace itemupdate -e blancoj@umich.edu -s /misc/meta_desc -a dc.description 2>&1 | tee outfile_add
#./dspace itemupdate -e blancoj@umich.edu -s /misc/meta_author -a dc.contributor.author 2>&1 | tee outfile_add

########################################################



&FixMeta();


$dbhP->disconnect;

exit;

################################################################################################


sub FixMeta
  {
    `rm -r $gBaseDataDir/meta_author`;
    `mkdir $gBaseDataDir/meta_author`;

    `rm -r $gBaseDataDir/meta_desc`;
    `mkdir $gBaseDataDir/meta_desc`;

    `rm -r $gBaseDataDir/meta_delete`;
    `mkdir $gBaseDataDir/meta_delete`;

    my @items = &GetItems();

    my $count = 1;
    foreach my $item_id ( @items )
      {
        my $handle = &GetHandle ( $item_id );

	      &PrepDirDelete ( $count, $handle );

	      my $dir_file = qq{$gBaseDataDir/meta_desc/$count};
        my $msg = qq{For a complete list of authors, please look at article.};
	      &PrepDirDesc ($dir_file, $handle, $msg );

	      my $dir_file = qq{$gBaseDataDir/meta_author/$count};
        my $msg = qq{More than 100 authors};
	      &PrepDirAuthor ($dir_file, $handle, $msg );
 
        $count = $count + 1;

      }
    
  }


sub GetItems
    {
      #my $statement = qq{select dspace_object_id, count(*) from metadatavalue where metadata_field_id =1 and dspace_object_id in (select uuid from item where submitter_id ='61180f42-efde-4ac2-9630-10793834eafb') group by 1 having count(*) >= 100 order by 2 desc;};
    
      my $statement = qq{select dspace_object_id, count(*) from metadatavalue where metadata_field_id =1 group by 1 having count(*) > 100 order by 2 desc};

      my $sth = $dbhP->prepare($statement)
        or die "Couldn't prep9are statement: " . $dbhP->errstr;
      
      # Read the matching records and print them out
      $sth->execute()             # Execute the query
        or die "Couldn't execute statement: " . $sth->errstr;
      
      my ( @items, $value, @data );
      while (@data = $sth->fetchrow_array()) {

	      if ( &isInArchive ( $data[0]) == 1 )
	      {
	        push ( @items, $data[0] );
	        #my $msg = qq{count = $data[0], count = $data[1]\n};
	        #print $msg;
	      }
	      else
	      {
	        my $msg = qq{Item Is Not IN ARCHIVE\n};
	        print $msg;
	      }
      }
      $sth->finish;

      return @items;

    }

sub PrepDirDesc
  {
    my ( $dir, $handle, $meta ) = @_;

    my $file = qq{$gBaseBinDir/cronjobs/meta_file_desc};
    my $dub_file = &ReadFile ( $file );
    $dub_file =~ s,\$HANDLE,$handle,s;
    $dub_file =~ s,\$METAVAKYE,$meta,s;

    `mkdir $dir`;

    my $file = qq{$dir/dublin_core.xml};
    &WriteFile ( $dub_file, $file );
  }


sub PrepDirAuthor
  {
    my ( $dir, $handle, $meta ) = @_;

    my $file = qq{$gBaseBinDir/cronjobs/meta_file_author};
    my $dub_file = &ReadFile ( $file );
    $dub_file =~ s,\$HANDLE,$handle,s;
    $dub_file =~ s,\$METAVAKYE,$meta,s;

    `mkdir $dir`;

    my $file = qq{$dir/dublin_core.xml};
    &WriteFile ( $dub_file, $file );
  }


sub PrepDirDelete
  {
    my ( $count, $handle ) = @_;

    my $file = qq{$gBaseBinDir/cronjobs/meta_file_delete};
    my $dub_file = &ReadFile ( $file );
    $dub_file =~ s,\$HANDLE,$handle,s;

    my $dir = qq{$gBaseDataDir/meta_delete/$count};
    `mkdir $dir`;

    my $file = qq{$gBaseDataDir/meta_delete/$count/dublin_core.xml};
    &WriteFile ( $dub_file, $file );
  }


sub GetHandle
  {
    my ( $item_id ) = @_;
   
    my $statement = qq{select handle  from handle where resource_id='$item_id'};
    
    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;
      
    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;
      
    my ( $handle, $value, @data );
    while (@data = $sth->fetchrow_array()) {
      $value = qq{$data[0]}; 

      $handle = qq{$value};

    }
    $sth->finish;
    
    return $handle;
    
  }

sub ReadFile
{
    my ( $fileName ) = @_;

    open FH, "<$fileName";
    binmode FH;
    my ($bytesRead, $buffer, $chunk);
    while ( $bytesRead = read(FH, $chunk, 1024) ) 
    {
        $buffer .= $chunk;
    }
    close FH;
    
    return $buffer;
}

sub WriteFile 
  {
    my ( $report, $filename ) = @_;

    #Now you want to create the file
    open ( OUTFILE, ">$filename" ) || die();
    print OUTFILE $report;
    close OUTFILE;
  }

sub isInArchive
  {
    my ( $item_id ) = @_;

   my $statement = qq{select item_id from item where in_archive=true and uuid ='$item_id'};


    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;


    my ( @data, @bit );
    while (@data = $sth->fetchrow_array()) {
      return 1;
    }

    $sth->finish;

    return 0;

  }

__END__;



