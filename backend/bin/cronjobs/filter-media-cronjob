#!/usr/bin/perl
#
# Copyright 2000, The Regents of The University of Michigan, All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

BEGIN
{
  require "strict.pm";
  strict::import();
}

# ----------------------------------------------------------------------
#               start of MAIN
# ----------------------------------------------------------------------

use DBI;
use File::Path;


my $gDbName         = $ENV{'DB_NAME'};
my $gDbUser         = $ENV{'DB_USER'};
my $gDbPassword     = $ENV{'DB_PASSWORD'};
my $gDbService      = $ENV{'DB_SERVICE'};
my $gDbPort         = $ENV{'DB_PORT'};

my $dbhP = DBI->connect("dbi:Pg:dbname=$gDbName;host=$gDbService;port=$gDbPort", "$gDbUser", "$gDbPassword");

my @item_ids = &GetAllItems();

foreach my $item_id ( @item_ids )
  {
    my $command = qq{/dspace/bin/dspace filter-media -i $item_id\n};
    print $command;

my $output = `$command`;

# Print the output
print $output;

  }


$dbhP->disconnect;
exit;

sub GetAllItems
{

  my $statement = qq{select uuid from item where in_archive=true};

  my $sth = $dbhP->prepare($statement)
    or die "Couldn't prepare statement: " . $dbhP->errstr;

  # Read the matching records and print them out
  $sth->execute()             # Execute the query
    or die "Couldn't execute statement: " . $sth->errstr;

  my $count = 0;
  my @handles;
  my ( @data );
  while (@data = $sth->fetchrow_array()) {
    my $item_id = $data[0];
    my $has_pdf = &DoesItHavePdfFiles ( $item_id );
    if ( $has_pdf == 1 )
    {
      my $has_text = &DoesItHaveTextBundle ( $item_id );
      if ( $has_text == 0 )
      {
  my $handle = &GetHandle ( $item_id );
  push ( @handles, $handle);
  $count = $count + 1;
      }
    }
    if ( $count > 5000 )
    {
      last;
    }
  }
  $sth->finish;

  return @handles;

}

sub DoesItHaveTextBundle 
  {
    my ( $item_id ) = @_;


    my $statement = qq{select bitstream_id from bundle2bitstream where bundle_id in (select bundle_id from item2bundle where item_id = '$item_id') and bundle_id in ( select dspace_object_id from metadatavalue where text_value = 'TEXT' and metadata_field_id= 64)};

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;
    
    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $found = 0;
    my @handles;
    my ( @data );
    while (@data = $sth->fetchrow_array()) {
      $found = 1;
    }
    $sth->finish;    

    return $found;


  }

sub DoesItHavePdfFiles
  {
    my ( $item_id ) = @_;


    my $statement = qq{select bitstream_id from bundle2bitstream where bundle_id in (select bundle_id from item2bundle where item_id = '$item_id') and bundle_id in ( select dspace_object_id from metadatavalue where text_value = 'ORIGINAL' and metadata_field_id= 64)};

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;
    
    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $found = 0;
    my @handles;
    my ( @data );
    while (@data = $sth->fetchrow_array()) {
      my $bit_id = $data[0];
      my $bit_name = &GetBitName ( $bit_id );
      if ( $bit_name =~ m,.*\.pdf$, )
	{
	  $found = 1;
	}
    }
    $sth->finish;    

    return $found;


  }

sub GetBitName
  {  
    my ( $bit_id ) = @_;

    my $statement = qq{select text_value from metadatavalue where metadata_field_id = 64 and dspace_object_id= '$bit_id'};
    
    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;
    
    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $name;
    my ( @data );
    while (@data = $sth->fetchrow_array()) {
      $name = $data[0];
    }

    $sth->finish;

    return $name;
  }

sub GetHandle
  {
    my ( $item_id ) = @_;

    my $statement = qq{select handle from handle where resource_id = '$item_id'};

    
    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;
    
    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $handle;
    my ( @data );
    while (@data = $sth->fetchrow_array()) {
      $handle = $data[0];
      
    }
    $sth->finish;
    return $handle;
  }

sub SortUniquifyList
{
    my ( $aRef, $numeric ) = @_;
    my %hash;

    foreach my $item ( @$aRef )
    {      $hash{$item}++;     }

    if ( defined ( $numeric ) )
    {
        @$aRef = sort { $a <=> $b } ( keys %hash );
    }
    else
    {
        @$aRef = sort ( keys %hash );
    }
  }


sub WriteReportToFile 
  {
    my ( $filename, $report ) = @_;

    #Now you want to create the file
    open ( OUTFILE, ">$filename" ) || die();
    print OUTFILE $report;
    close OUTFILE;
  }


__END__;
