#!/usr/bin/perl
#
# Copyright 2000, The Regents of The University of Michigan, All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

BEGIN
{
  require "strict.pm";
  strict::import();
}

# ----------------------------------------------------------------------
#               start of MAIN
# ----------------------------------------------------------------------

use Encode;
use utf8;
use DBI;
use File::Path;

use LWP::Simple;
use LWP::UserAgent;

my $gBaseLogDir    = $ENV{'BASE_LOG_DIR'};
my $gBaseBinDir    = $ENV{'BASE_BIN_DIR'};

&CheckDspaceLog ();

exit;

sub GetMonthYear
{
  #my $newtime = scalar localtime(time()- 86400);
  my $newtime = scalar localtime(time());
  my %months = (
		"Jan" => "Dec",
		"Feb" => "Jan",
		"Mar" => "Feb",
		"Apr" => "Mar",
		"May" => "Apr",
		"Jun" => "May",
		"Jul" => "Jun",
		"Aug" => "Jul",
		"Sep" => "Aug",
		"Oct" => "Sep",
		"Nov" => "Oct",
		"Dec" => "Nov",
	       );

  my %monthsNumeric = (
		"Jan" => "12",
		"Feb" => "01",
		"Mar" => "02",
		"Apr" => "03",
		"May" => "04",
		"Jun" => "05",
		"Jul" => "06",
		"Aug" => "07",
		"Sep" => "08",
		"Oct" => "09",
		"Nov" => "10",
		"Dec" => "11",
	       );

  my $month = $months{substr ($newtime,4, 3)};
  my $MonthNumeric = $monthsNumeric{substr ($newtime,4, 3)};

  my $year = substr ($newtime,20, 4);

  $year = $year + 0;

  if ( $month eq 'Dec' )
    {
      $year = $year - 1;
    }

  return ( $year, $month, $MonthNumeric );

}

sub DoesDirExists
{
    my ( $dir ) = @_;

    open  (FH, "<$dir");
    my $thereIsADir = 0;
    if ( -d FH)
    {
	$thereIsADir = 1;
    }
    close(FH);

    return $thereIsADir;
}

sub LogFileBelongsToDate
{
  my ( $logfile, $Month, $day ) = @_;

  my $info = `ls -la $logfile`;

  my $dateInfo;
  if ($day < 10 )
    {
      $dateInfo = qq{$Month $day};
    }
  else
    {
      $dateInfo = qq{$Month $day};
    }

  if ($info =~ m,.*?$dateInfo.*, )
    {
      return 1;
    }
  else
    {
      return 0;
    }

}

sub CheckDspaceLog
{

  my ( $year, $month, $MonthNumeric ) = &GetMonthYear();

  #If the dir does not exists, create it.
  my $dirToCheck = qq{$gBaseLogDir/$month\_$year};
  if ( &DoesDirExists( $dirToCheck ) )
    {
    }
  else
    {
      `mkdir $dirToCheck`;
    }

    my $basedir = qq{$gBaseLogDir/};
    my $source = $basedir;

    opendir FH, $source;
    #avoid files with . and ..
    my @testtems = grep !/^\.\.?$/, readdir FH;
    closedir FH;

    my $msg = qq{Getting a list of the files.\n};
    print $msg;

    my @allitems;
    foreach my $itemname (@testtems)
    {
        my $item = qq{$source$itemname};
        push (@allitems, $item);
    }

    my $count = 0;
    #Get a complete list of all directories.
    my @listOfLogFiles;
    foreach my $itemname (@allitems)
    {
        open  (FH, "<$itemname");
	      if ( not -d FH )
        {
	        if  ($itemname =~ /(.*?)dspace\.log\.$year-$MonthNumeric.*/ )
	        {
            push ( @listOfLogFiles, $itemname );
		        $count = $count + 1;
	        }
        }
        else  #it must be a directory
        {
        }
        close(FH);
    }

    #Now that you have a list of all the log files
    foreach my $logfile (@listOfLogFiles)
    {
      my $file = $logfile;
      $file =~ s,.*\/(.*),$1,;
      # the -a is to ignore binary characters.
      `cat $logfile | grep -a "view_" |grep -a details > $dirToCheck/$file`
    }

  #create the concatinated file
  my $msg = qq{All DONE moving files to $dirToCheck.\n};
  print $msg;

  my $date = qq{$year/$MonthNumeric};

  my $msg = qq{Starting find_crawlers.\n};
  print $msg;
  my $out = `$gBaseBinDir/find_crawlers -d $date -l $dirToCheck 2>&1`;
  print $out;
  my $msg = qq{End find_crawlers.\n};
  print $msg;

  my $msg = qq{Starting remov_ips.\n};
  print $msg;
  my $out = `$gBaseBinDir/remove_ips -d $date -l $dirToCheck 2>&1`;
  print $out;
  my $msg = qq{End remove_ips.\n};
  print $msg;

  my $msg = qq{Starting additional_stats_data.\n};
  print $msg;
  my $out = `$gBaseBinDir/additonal_stats_data 2>&1`;
  print $out;
  my $msg = qq{End additional_stats_data.\n};
  print $msg;

  my $msg = qq{Start collectect ip data gathering.\n};
  print $msg;
  my $out = `$gBaseBinDir/ip_stats_data -d $date -l $dirToCheck 2>&1`;
  print $out;
  my $msg = qq{End find_crawler.\n};
  print $msg;

  my $msg = qq{Starting consolidate_ips.\n};
  print $msg;
  my $out = `$gBaseBinDir/consolidate_ips -d $date 2>&1`;
  print $out;
  my $msg = qq{End consolidate_ips.\n};
  print $msg;

}

__END__;



