#!/usr/bin/perl
#
# Copyright 2000, The Regents of The University of Michigan, All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

BEGIN
{
    unshift( @INC, '/usr/local/apache2/cgi-bin/stats' );
}

BEGIN
{
    require "strict.pm";
    strict::import();
}
END
{
    # Exit program
    exit;
}
# ----------------------------------------------------------------------
#               start of MAIN
# ----------------------------------------------------------------------

#use CGI qw( :standard :html3 escape unescape escapeHTML );
use CGI;
use DBI;
use File::Path;

use StatsUtils;

# set umask (for file uploads)
umask 000;

$::VERSION = 1.0000;

my $gTotalRecsToDowload = 1;

my $gCgiServer     = $ENV{'HTTP_HOST'} ? $ENV{'HTTP_HOST'} : 'localhost';
my $gUrlRoot       = 'http://' . $gCgiServer . '/cgi/stats/stats';
my $gClassWebDir   = '/usr/local/apache2/cgi-bin/stats';


# --------------------------------------------------

# ----------------------------------------------------------------------
#  get URL params and validate them
my $gCgi = new CGI;

my $dbhP = DBI->connect("dbi:Pg:dbname=dspace;host=db", "dspace", "dspace");

my $gOutputHtml = '';

#&SetEncoding();
my $submit = $gCgi->param( 'submit' );
my $pagenum = $gCgi->param ( 'pagenum' );
my $stattype = $gCgi->param ( 'stattype' );
my $restrict = $gCgi->param ( 'restrict' );
my $collid = $gCgi->param ( 'collid' );

if ( ( $submit eq 'Get Stats' ) && ( $stattype eq 'access' ) )
  {
     $gOutputHtml = &GetStatsAccess( 0 );
  }
elsif ( ( $submit eq 'Get Stats' ) && ( $stattype eq 'added' ) )
  {
     $gOutputHtml = &GetStatsAdded( 0 );
  }
elsif ( ( $submit eq 'Back' ) && ( $pagenum == 2 ) && ( $stattype eq 'access' ) )
  {
     $gOutputHtml = &DisplayAccessPage();
  }
elsif ( ( $submit eq 'Back' ) && ( $pagenum == 2 ) && ( $stattype eq 'added' ) )
  {
     $gOutputHtml = &DisplayAddedPage();
  }
elsif ( ( $submit eq 'Back' ) && ( $stattype eq 'access' ) )
  {
     $gOutputHtml = &GetStatsAccess( 1 );
  }
elsif ( ( $submit eq 'Back' ) && ( $stattype eq 'added' ) )
  {
     $gOutputHtml = &GetStatsAdded( 1 );
  }
elsif ( $submit eq 'Items Accessed' )
  {
     $gOutputHtml = &DisplayAccessPage();
  }
elsif ( $submit eq 'Items Added' )
  {
     $gOutputHtml = &DisplayAddedPage();
  }
elsif ( ( $submit eq 'Next' ) && ( $stattype eq 'access' ) )
  {
     $gOutputHtml = &GetStatsAccess( 0 );
  }
elsif ( ( $submit eq 'Next' ) && ( $stattype eq 'added' ) )
  {
     $gOutputHtml = &GetStatsAdded( 0 );
  }
elsif ( ( $submit eq 'Download' ) && ( $stattype eq 'access' ) )
  {
     $gOutputHtml = &ProcessDownloadAccess( $collid );
  }
elsif ( ( $submit eq 'Download' ) && ( $stattype eq 'added' ) )
  {
     $gOutputHtml = &ProcessDownloadAdded( $collid );
  }
elsif ( ( $submit eq 'EmailReport' ) && ( $stattype eq 'access' ) )
  {
    my $EStatus = &ProcessEmailReport();
    $gOutputHtml = &GetStatsAccess ( 1, $EStatus );
  }
elsif ( ( $submit eq 'EmailReport' ) && ( $stattype eq 'added' ) )
  {
    my $EStatus = &ProcessEmailReport();
    $gOutputHtml = &GetStatsAdded( 1, $EStatus )
  }
elsif ( $submit eq 'Home' )
  {
    $gOutputHtml = &DisplayFirstPage();
  }
else
  {
    $gOutputHtml = &DisplayFirstPage();
  }

if ( $gOutputHtml ne '' )
  {
    &OutputHtmlPage( \$gOutputHtml );
  }

#disconnect from the database.
$dbhP->disconnect;

exit;

# ----------------------------------------------------------------------

sub OutputHtmlPage
{
    my $sRef = shift ;

    # print out html header
    print &CGI::header( -type => 'text/html' );
    print $$sRef;
}

sub GetValidDateRanges
  {

    my $statement = qq{Select distinct colldt from statsidanddate order by 1 desc};

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $DtRange = qq{<SELECT NAME="\$TYPEDT">\n};

    my ( @data );
    while (@data = $sth->fetchrow_array()) {
      $DtRange .= qq{<OPTION VALUE="$data[0]">$data[0]};
    }
    $sth->finish;

    $DtRange .= qq{</SELECT>\n};

    return $DtRange;

  }

sub DisplayFirstPage
{
  my $collid   = $gCgi->param( 'collid' );
  my $restrict = $gCgi->param( 'restrict' );

  my ( $count, $collectionList ) = &GetCollectionList( $collid, $restrict );

  my $page;
  if ( $count == 0 )
    {
      #We have a good collid, Display Main mage
      $page = &GetTemplateText ('nocoll.tpl');
    }
  else
    {
      #We have a good collid, Display Main mage
      $page = &GetTemplateText ('mainmenu.tpl');
    }

  $page =~ s,\$RESTRICT,$restrict,gs;
  $page =~ s,\$COLLECTION_LIST,$collectionList,gs;

  return $page;
}

sub GetCollectionList
  {
    my ( $collid, $restrict ) = @_;

    my $statement;
    #if ( ( $collid ) && ( $restrict ) )
    #  {
#	$statement = qq{Select distinct C.collection_id, C.name from  collection C where C.collection_id in (select distinct collid from statsidanddate where collid=$collid)  order by 2};
#      }
#    else
#      {
#	$statement = qq{Select distinct C.collection_id, C.name from  collection C where C.collection_id in (select distinct collid from statsidanddate ) order by 2};
#      }
#

    if ( ( $collid ) && ( $restrict ) )
      {
	$statement = qq{Select distinct C.uuid, M.text_value from  collection C, metadatavalue M where C.uuid='$collid'  and C.uuid = M.dspace_object_id and M.metadata_field_id=64 order by 2};
      }
    else
      {
	$statement = qq{Select distinct C.uuid, M.text_value from  collection C, metadatavalue M where C.uuid=M.dspace_object_id and M.metadata_field_id=64  order by 2};
      }


    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $coll_list = qq{<SELECT NAME="collid">\n};
    my $count = 0;
    my ( @data );
    while (@data = $sth->fetchrow_array()) {

      my $collname = $data[1];
      #$collname =~ s,\(All Collections\),,gs;
      $coll_list .= qq{<OPTION VALUE="$data[0]">$collname};
      $count = $count + 1;
    }
    $sth->finish;

    $coll_list .= qq{</SELECT>\n};

    return ( $count, $coll_list );
  }



sub DisplayAddedPage
{

  my $collid = $gCgi->param ( 'collid' );
  #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
  my $collname = &GetCollName ( $collid );

  #We have a good collid, Display Main mage
  my $page = &GetTemplateText ('items_added.tpl');

  my $dateStart = &GetValidDateRanges();
  my $dateEnd = $dateStart;

  $dateStart =~ s,\$TYPEDT,startdt,gs;
  $dateEnd =~ s,\$TYPEDT,enddt,gs;

  $page =~ s,\$START_DATE,$dateStart,gs;
  $page =~ s,\$END_DATE,$dateEnd,gs;
  $page =~ s,\$COLLID,$collid,gs;
  $page =~ s,\$RESTRICT,$restrict,gs;
  $page =~ s,\$COLLNAME,$collname,gs;

  if ( $collid eq '6' )
    {
      $page =~ s,\$FOR_PR_ONLY,<OPTION VALUE="publisher">Publisher,gs;
    }
  else
    {
      $page =~ s,\$FOR_PR_ONLY,,gs;
    }


  return $page;
}



sub DisplayAccessPage
{

  my $collid = $gCgi->param ( 'collid' );
  #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
  my $collname = &GetCollName ( $collid );

  #We have a good collid, Display Main mage
  my $page = &GetTemplateText ('items_accessed.tpl');

  my $dateStart = &GetValidDateRanges();
  my $dateEnd = $dateStart;

  $dateStart =~ s,\$TYPEDT,startdt,gs;
  $dateEnd =~ s,\$TYPEDT,enddt,gs;

  $page =~ s,\$START_DATE,$dateStart,gs;
  $page =~ s,\$END_DATE,$dateEnd,gs;
  $page =~ s,\$COLLID,$collid,gs;
  $page =~ s,\$RESTRICT,$restrict,gs;
  $page =~ s,\$COLLNAME,$collname,gs;

  if ( $collid == 6 )
    {
      $page =~ s,\$FOR_PR_ONLY,<OPTION VALUE="publisher">Publisher,gs;
    }
  else
    {
      $page =~ s,\$FOR_PR_ONLY,,gs;
    }


  return $page;
}


sub GetStatsAdded
{
  my ( $goBack, $EStatus ) = @_;

  #We have a good collid, Display Main mage
  my $page = &GetTemplateText ('added_report.tpl');

  my $collid = $gCgi->param ( 'collid' );
  my $pagenum = $gCgi->param ( 'pagenum' );

  if ( $goBack )
    {
      $pagenum = $pagenum - 2;
    }
  if ( $pagenum == 0 )
    {
      $pagenum = 1;
    }

  #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
  my $collname = &GetCollName ( $collid );

  my $type = $gCgi->param ( 'searchtype' );
  my $searchvalue = $gCgi->param ( 'searchvalue' );
  my $startdt = $gCgi->param ( 'startdt' );
  my $enddt = $gCgi->param ( 'enddt' );

  my $statement;
  if ( $searchvalue )
    {
      $searchvalue = lc ( $searchvalue );
      $searchvalue =~ s,\*,%,gs;
      $statement = &StatsUtils::GetSQLAddedSearch ( $collid, $enddt, $startdt, $type, $searchvalue );
    }
  else
    {
      $statement = &StatsUtils::GetSQLAddedNonSearch ( $collid, $enddt, $startdt );
    }

  my $TotalRecs = 0;
  my $lastPage = 0;
  ( $page, $lastPage, $TotalRecs )  = &GetPageReportAdded ( $statement, $page, $pagenum );

  $pagenum = $pagenum + 1;
  $page =~ s,\$COLLNAME,$collname,gs;
  $page =~ s,\$COLLID,$collid,gs;
  $page =~ s,\$PAGENUM,$pagenum,gs;
  $page =~ s,\$STATTYPE,$stattype,gs;
  $page =~ s,\$RESTRICT,$restrict,gs;

  $page =~ s,\$STARTDT,$startdt,gs;
  $page =~ s,\$ENDDT,$enddt,gs;
  $page =~ s,\$SEARCHVALUE,$searchvalue,gs;
  $page =~ s,\$SEARCHTYPE,$type,gs;


  if ( $lastPage )
    {
      $page =~ s,\$NEXT_PAGE,,gs;
    }
  else
    {
      $page =~ s,\$NEXT_PAGE,<input type="submit" name="submit" value="Next" class="formfont">,gs;
    }

  if ( $TotalRecs > $gTotalRecsToDowload )
    {
      $page =~ s,\$DOWNLOAD_REQ,Email:<input type="text" name="email" class="formfont"><input type="submit" name="submit" value="EmailReport" class="formfont">,gs;
    }
  else
    {
      $page =~ s,\$DOWNLOAD_REQ,<input type="submit" name="submit" value="Download" class="formfont">,gs;
    }

  my $msg = qq{<P><font color="#FF0000">$EStatus</FONT></P>};
  if ( $EStatus )
    {
      $page =~ s,\$EMAIL_STATUS,$msg,gs;
    }
  else
   {
      $page =~ s,\$EMAIL_STATUS,,gs;
   }

  return $page;
}

sub GetCollName
  {
    my ( $coll_id ) = @_;

    my $statement = qq{Select text_value from metadatavalue where  dspace_object_id = '$coll_id' and metadata_field_id=64 };

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my ( @data, $name );
    while (@data = $sth->fetchrow_array()) {
      $name = $data[0];
    }
    $sth->finish;

    return $name;

  }



sub GetStatsAccess
{
  my ( $goBack, $EStatus ) = @_;

  #We have a good collid, Display Main mage
  my $page = &GetTemplateText ('access_report.tpl');

  my $collid = $gCgi->param ( 'collid' );
  my $pagenum = $gCgi->param ( 'pagenum' );

  if ( $goBack )
    {
      $pagenum = $pagenum - 2;
    }
  if ( $pagenum == 0 )
    {
      $pagenum = 1;
    }


  #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
  my $collname = &GetCollName ( $collid );

  my $type = $gCgi->param ( 'searchtype' );
  my $searchvalue = $gCgi->param ( 'searchvalue' );
  my $startdt = $gCgi->param ( 'startdt' );
  my $enddt = $gCgi->param ( 'enddt' );

  my $statement;
  if ( $searchvalue )
    {
      $searchvalue = lc ( $searchvalue );
      $searchvalue =~ s,\*,%,gs;
      $statement = &StatsUtils::GetSQLAccessSearch ( $collid, $enddt, $startdt, $type, $searchvalue ) ;
    }
  else
    {
      $statement = &StatsUtils::GetSQLAccessNonSearch ( $collid, $enddt, $startdt );
    }

  my $lastPage = 0;
  my $TotalRecs = 0;
  ( $page, $lastPage, $TotalRecs ) = GetPageReportAccess ( $collid, $statement, $page, $pagenum );

  $pagenum = $pagenum + 1;
  $page =~ s,\$COLLNAME,$collname,gs;
  $page =~ s,\$COLLID,$collid,gs;
  $page =~ s,\$PAGENUM,$pagenum,gs;
  $page =~ s,\$STATTYPE,$stattype,gs;
  $page =~ s,\$RESTRICT,$restrict,gs;

  $page =~ s,\$STARTDT,$startdt,gs;
  $page =~ s,\$ENDDT,$enddt,gs;
  $page =~ s,\$SEARCHVALUE,$searchvalue,gs;
  $page =~ s,\$SEARCHTYPE,$type,gs;

  if ( $lastPage )
    {
      $page =~ s,\$NEXT_PAGE,,gs;
    }
  else
    {
      $page =~ s,\$NEXT_PAGE,<input type="submit" name="submit" value="Next" class="formfont">,gs;
    }


  if ( $TotalRecs > $gTotalRecsToDowload )
    {
      $page =~ s,\$DOWNLOAD_REQ,Email:<input type="text" name="email" class="formfont"><input type="submit" name="submit" value="EmailReport" class="formfont">,gs;
    }
  else
    {
      $page =~ s,\$DOWNLOAD_REQ,<input type="submit" name="submit" value="Download" class="formfont">,gs;
    }

  my $msg = qq{<P><font color="#FF0000">$EStatus</FONT></P>};
  if ( $EStatus )
    {
      $page =~ s,\$EMAIL_STATUS,$msg,gs;
    }
  else
   {
      $page =~ s,\$EMAIL_STATUS,,gs;
   }


  return $page;
}


sub ProcessEmailReport
{
  my $stattype = $gCgi->param ( 'stattype' );
  my $collid = $gCgi->param ( 'collid' );
  my $email = $gCgi->param ( 'email' );

  my $searchvalue = $gCgi->param ( 'searchvalue' );
  my $searchtype = $gCgi->param ( 'searchtype' );
  my $startdt = $gCgi->param ( 'startdt' );
  my $enddt = $gCgi->param ( 'enddt' );

  my $cmd;
  if ( $searchvalue )
    {
      $cmd = qq{$gClassWebDir/EmailReport -c $collid -t $stattype -s $startdt -e $enddt  -m $email -v '$searchvalue' -x $searchtype &};
    }
  else
   {
      $cmd = qq{$gClassWebDir/EmailReport -c $collid -t $stattype -s $startdt -e $enddt  -m $email &};
   }
  my $a;

  my $EStatus = qq{NO Email was entered};
  if ( $email )
    {
      system ( $cmd );
      $EStatus = qq{Email was SENT};;
    }

  return $EStatus;


  }

sub GetLineAccess
  {
    my ( $collid, $PHandle, $RecCount, $PHandle,  $PInside, $PInsideUM, $PInsideNONUM, $POutside, $POutsideUM, $POutsideNONUM, $PBit, $PBitUM, $PBitNONUM, $PPublisher ) = @_;

    my $Line;
    my ( $authors, $title, $dateAdded, $bitCount ) = &StatsUtils::GetRestOfData ( $dbhP, $PHandle );
    if ( $collid == 6 )
      {
	my ( $doi, $issn ) = &StatsUtils::GetRestOfDataForPR ( $dbhP, $PHandle );
	$Line =  qq{<TR><TD>$RecCount</TD><TD>$PHandle</TD><TD>$title</TD><TD>$authors</TD><TD>$PInside</TD><TD>$PInsideUM</TD><TD>$PInsideNONUM</TD><TD>$POutside</TD><TD>$POutsideUM</TD><TD>$POutsideNONUM</TD><TD>$PBit</TD><TD>$PBitUM</TD><TD>$PBitNONUM</TD><TD>$PPublisher</TD><TD>$dateAdded</TD><TD>$bitCount</TD><TD>$doi</TD><TD>$issn</TD></TR>\n};
      }
    else
      {
	$Line =  qq{<TR><TD>$RecCount</TD><TD>$PHandle</TD><TD>$title</TD><TD>$authors</TD><TD>$PInside</TD><TD>$PInsideUM</TD><TD>$PInsideNONUM</TD><TD>$POutside</TD><TD>$POutsideUM</TD><TD>$POutsideNONUM</TD><TD>$PBit</TD><TD>$PBitUM</TD><TD>$PBitNONUM</TD><TD>$PPublisher</TD><TD>$dateAdded</TD><TD>$bitCount</TD></TR>\n};
      }

    return $Line;
  }



sub GetPageReportAccess
  {
    my ( $collid, $statement, $page, $pagenum  ) = @_;

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $page_report = qq{<TABLE STYLE="font: 10pt">\n};
    #page_report = qq{<FONT SIZE=1 >\n};
    $page_report .= qq{<CAPTION ALIGN=top>Stats Table<CAPTION>\n};
    if ( $collid == 6 )
      {
	$page_report .= qq{<TR><TD>LineNo</TD><TD>Handle</TD><TD>Title</TD><TD>Authors</TD><TD>Inside</TD><TD>InsideUM</TD><TD>InsideNonUM</TD><TD>Outside</TD><TD>OutsideUM</TD><TD>OutsideNonUM</TD><TD>Download</TD><TD>DownloadUM</TD><TD>DownloadNonUM</TD><TD>Publisher</TD><TD>DateAdded</TD><TD>BitCount</TD><TD>DOI</TD><TD>ISSN</TD></TR>\n};
      }
    else
      {
	$page_report .= qq{<TR><TD>LineNo</TD><TD>Handle</TD><TD>Title</TD><TD>Authors</TD><TD>Inside</TD><TD>InsideUM</TD><TD>InsideNonUM</TD><TD>Outside</TD><TD>OutsideUM</TD><TD>OutsideNonUM</TD><TD>Download</TD><TD>DownloadUM</TD><TD>DownloadNonUM</TD><TD>Publisher</TD><TD>DateAdded</TD><TD>BitCount</TD></TR>\n};
      }
    my $lastLine;
    my $PHandle;
    my $PTitle;
    my $PInside = 0;
    my $POutside = 0;
    my $PBit = 0;
    my $PInsideUM = 0;
    my $POutsideUM = 0;
    my $PBitUM = 0;
    my $PInsideNONUM = 0;
    my $POutsideNONUM = 0;
    my $PBitNONUM = 0;
    my $PPublisher = '';
    my $Line;
    my $CreateLine = 0;

    my $SHandle;

    my $TotalRecCount = $pagenum * &StatsUtils::GetTotalPerPage();
    my $RecCount = 0;
    my $startRec = $TotalRecCount - &StatsUtils::GetTotalPerPage();

    my ( $colldt, $collid, $collname, $handle, $title, $publisher, $inside_count, $out_count, $bit_count, $insideum_count, $outum_count, $bitum_count, $insidenonum_count, $outnonum_count, $bitnonum_count, @data );
    while ( (@data = $sth->fetchrow_array()) && ($RecCount <= $TotalRecCount)) {
      $colldt           = $data[0];
      $collid           = $data[1];
      $collname         = $data[2];
      $publisher        = $data[5];

      $handle           = $data[3];
      $title            = $data[4];
      $inside_count     = $data[6];
      $out_count        = $data[7];
      $bit_count        = $data[8];

      $insideum_count        = $data[9];
      $insidenonum_count     = $data[10];
      $outum_count           = $data[11];
      $outnonum_count        = $data[12];
      $bitum_count           = $data[13];
      $bitnonum_count        = $data[14];

      if ( $PHandle eq $handle )
      {
	$PPublisher = $publisher;
	$PInside = $PInside + $inside_count;
	$POutside = $POutside + $out_count;
	$PBit = $PBit + $bit_count;

	$PInsideUM = $PInsideUM + $insideum_count;
	$PInsideNONUM = $PInsideNONUM + $insidenonum_count;
	$POutsideUM = $POutsideUM + $outum_count;
	$POutsideNONUM = $POutsideNONUM + $outnonum_count;
	$PBitUM = $PBitUM + $bitum_count;
	$PBitNONUM = $PBitNONUM + $bitnonum_count;

	$SHandle = $handle;

	$CreateLine = 1;

      }
      else
      {
	if ( $CreateLine )
	  {
	    if ( ( $RecCount >= $startRec ) && ( $RecCount < $TotalRecCount ) )
	      {
		my $LineNo = $RecCount + 1;
		$Line = &GetLineAccess ( $collid, $PHandle, $LineNo, $PHandle,  $PInside, $PInsideUM, $PInsideNONUM, $POutside, $POutsideUM, $POutsideNONUM, $PBit, $PBitUM, $PBitNONUM, $PPublisher ) ;
		$page_report .= $Line;
	      }
	    $CreateLine = 0;
	    $RecCount = $RecCount + 1;
	  }

	$PPublisher = $publisher;
	$PInside = $inside_count;
	$POutside = $out_count;
	$PBit = $bit_count;

	$PInsideUM = $insideum_count;
	$PInsideNONUM = $insidenonum_count;
	$POutsideUM = $outum_count;
	$POutsideNONUM = $outnonum_count;
	$PBitUM = $bitum_count;
	$PBitNONUM = $bitnonum_count;

	$CreateLine = 1;
      }
      $PHandle = $handle;

    }
    $sth->finish;

    my ( $buffer, $TotalRecs, $TotalPages ) = &StatsUtils::GetDownloadDataAccess ( $dbhP, 'count', 'count', $statement );


    if ( ( ( $CreateLine )  && ( $RecCount == ( $TotalRecs - 1 ) ) ) && ( $TotalRecCount > $TotalRecs ) )
      {

	if ( $PHandle eq $SHandle )
	  {
            my $jose = 1;
#	    $PPublisher = $publisher;
#	    $PInside = $PInside + $inside_count;
#	    $POutside = $POutside + $out_count;
#	    $PBit = $PBit + $bit_count;

#	    $PInsideUM = $PInsideUM + $insideum_count;
#	    $PInsideNONUM = $PInsideNONUM + $insidenonum_count;
#	    $POutsideUM = $POutsideUM + $outum_count;
#	    $POutsideNONUM = $POutsideNONUM + $outnonum_count;
#            $PBitUM = $PBitUM + $bitum_count;
#	    $PBitNONUM = $PBitNONUM + $bitnonum_count;
	  }

	my $LineNo = $RecCount + 1;
    	$Line = &GetLineAccess ( $collid, $PHandle, $LineNo, $PHandle,  $PInside, $PInsideUM, $PInsideNONUM, $POutside, $POutsideUM, $POutsideNONUM, $PBit, $PBitUM, $PBitNONUM, $PPublisher ) ;
    	$page_report .= $Line;
      }

    $page_report .= qq{</TABLE>};

    $page =~ s,\$TOTALPAGES,$TotalPages,gs;
    $page =~ s,\$TOTALRECS,$TotalRecs,gs;
    $page =~ s,\$PAGE_REPORT,$page_report,gs;


    my $lastPage = 0;
    if ( ( $TotalPages == $pagenum )  || ( $TotalPages == 0 ) )
    {
      $lastPage = 1;
    }

    return ( $page, $lastPage, $TotalRecs );

  }


sub GetPageReportAdded
  {
    my ( $statement, $page, $pagenum  ) = @_;

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $page_report = qq{<TABLE STYLE="font: 10pt">\n};
    $page_report .= qq{<CAPTION ALIGN=top>Stats Table<CAPTION>\n};
    $page_report .= qq{<TR><TD>LineNo</TD><TD>Handle</TD><TD>Title</TD><TD>Authors</TD><TD>Publisher</TD><TD>DateAdded</TD><TD>NumBitstreams</TD></TR>\n};

    my $Line;
    my $TotalRecCount = $pagenum * &StatsUtils::GetTotalPerPage();
    my $RecCount = 0;
    my $startRec = $TotalRecCount - &StatsUtils::GetTotalPerPage();
    my ($authors, $title, $handle, $dateAdded, $bitCount, $publisher, @data );
    while ( (@data = $sth->fetchrow_array()) && ($RecCount <= $TotalRecCount)) {
      $authors          = $data[0];
      $title            = $data[1];
      $handle           = $data[2];
      $dateAdded        = $data[3];
      $bitCount         = $data[4];
      $publisher        = $data[5];

      if ( ( $RecCount >= $startRec ) && ( $RecCount < $TotalRecCount ) )
	{
	  my $LineNo = $RecCount + 1;
	  my $Line =  qq{<TR><TD>$LineNo</TD><TD>$handle</TD><TD>$title</TD><TD>$authors</TD><TD>$publisher</TD><TD>$dateAdded</TD><TD>$bitCount</TD></TR>\n};
	  $page_report .= $Line;
	}

      $RecCount = $RecCount + 1;

    }
    $sth->finish;

    $page_report .= qq{</TABLE>};

    my ( $TotalRecs, $TotalPages ) = &GetTotalPagesAdded ( $statement );
    $page =~ s,\$TOTALPAGES,$TotalPages,gs;
    $page =~ s,\$TOTALRECS,$TotalRecs,gs;
    $page =~ s,\$PAGE_REPORT,$page_report,gs;

    my $lastPage = 0;
    if ( ( $TotalPages == $pagenum )  || ( $TotalPages == 0 ) )
    {
      $lastPage = 1;
    }

    return ( $page, $lastPage, $TotalRecs );

  }


sub GetTotalPagesAdded
  {
    my ( $statement ) = @_;

    my $sth = $dbhP->prepare($statement)
      or die "Couldn't prepare statement: " . $dbhP->errstr;

    # Read the matching records and print them out
    $sth->execute()             # Execute the query
      or die "Couldn't execute statement: " . $sth->errstr;

    my $RecCount = 0;
    my @data;
    while ( (@data = $sth->fetchrow_array()) ) {
      $RecCount = $RecCount + 1;
    }
    $sth->finish;

    my $pages = $RecCount/&StatsUtils::GetTotalPerPage();
    $pages = int ( $pages );
    if ( $RecCount % &StatsUtils::GetTotalPerPage() )
      {
	$pages = $pages + 1;
      }

    return ( $RecCount, $pages );

  }


sub ProcessDownloadAdded
  {
    my ( $collid ) = @_;

    #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
    my $collname = &GetCollName ( $collid );

    my $searchvalue = $gCgi->param ( 'searchvalue' );
    my $type = $gCgi->param ( 'searchtype' );
    my $startdt = $gCgi->param ( 'startdt' );
    my $enddt = $gCgi->param ( 'enddt' );

    my $statement;
    if ( $searchvalue )
      {
	$searchvalue = lc ( $searchvalue );
	$searchvalue =~ s,\*,%,gs;
	$statement = &StatsUtils::GetSQLAddedSearch ( $collid, $enddt, $startdt, $type, $searchvalue ) ;
      }
    else
      {
	$statement = &StatsUtils::GetSQLAddedNonSearch ( $collid, $enddt, $startdt );
      }

    my $dateRange;
    if ( $startdt eq $enddt )
      {
	$dateRange = $startdt;
      }
    else
      {
	$dateRange = qq{$startdt-$enddt};
      }
    my $data = &StatsUtils::GetDownloadDataAdded ( $dbhP, $dateRange, $statement );
    &OutputBuffer ( $data )

  }



sub ProcessDownloadAccess
  {
    my ( $collid ) = @_;

    #my $collname = &StatsUtils::GetCollname ( $dbhP, $collid );
    my $collname = &GetCollName ( $collid );

    my $searchvalue = $gCgi->param ( 'searchvalue' );
    my $type = $gCgi->param ( 'searchtype' );
    my $startdt = $gCgi->param ( 'startdt' );
    my $enddt = $gCgi->param ( 'enddt' );

  my $statement;
  if ( $searchvalue )
    {
      $searchvalue = lc ( $searchvalue );
      $searchvalue =~ s,\*,%,gs;
      $statement = &StatsUtils::GetSQLAccessSearch ( $collid, $enddt, $startdt, $type, $searchvalue ) ;
    }
  else
    {
      $statement = &StatsUtils::GetSQLAccessNonSearch ( $collid, $enddt, $startdt );
    }

    my $dateRange;
    if ( $startdt eq $enddt )
      {
	$dateRange = $startdt;
      }
    else
      {
	$dateRange = qq{$startdt-$enddt};
      }
    my ( $data, $RecCount, $Total ) = &StatsUtils::GetDownloadDataAccess ( $dbhP, $collid, $dateRange, $statement );
    &OutputBuffer ( $data );


    #Now for part2 - the file specific data.
    my $statement;
    if ( $searchvalue )
      {
	$searchvalue = lc ( $searchvalue );
	$searchvalue =~ s,\*,%,gs;
	$statement = &StatsUtils::GetSQLAccessSearchFiles ( $collid, $enddt, $startdt, $type, $searchvalue ) ;
      }
    else
      {
	$statement = &StatsUtils::GetSQLAccessNonSearchFiles ( $collid, $enddt, $startdt );
      }

      my $dateRange;
      if ( $startdt eq $enddt )
       {
	 $dateRange = $startdt;
       }
       else
       {
	 $dateRange = qq{$startdt-$enddt};
       }
    my ( $data, $RecCount, $Total ) = &StatsUtils::GetDownloadDataAccessFiles ( $dbhP, $collid, $dateRange, $statement );
    #Putting two outputs back to back makes it faile Jun 1 2021
    #Not even sure this is used anymore
    #&OutputBuffer ( $data );





  }


sub OutputZipFile
{

    my ( $ZipFile ) = @_;

    my $FileName = $ZipFile;
    if ( $FileName =~ /.*\/(.*)/ )
    {
	$FileName =~ s,,$1,gs;
    }
    if ( $FileName =~ /(.*)\..*/ )
    {
	$FileName =~ s,(.*)\..*,$1,gs;
    }
    my $FileName = qq{$FileName\.zip};

    open FH, "<$ZipFile";

    binmode(FH);

    print &CGI::header(-type => 'application/x-compressed', -attachment => $FileName,
                      );
    my ($bytesRead, $buffer);
    while ( $bytesRead = read(FH, $buffer, 1024) )
    {
        print $buffer;
    }

    return;

}

sub WriteFile
{

    my ( $fileName, $buffer ) = @_;

    #Now you want to append this to the file.
    open ( OUTFILE, ">$fileName" ) || die();
    print OUTFILE $buffer;
    close OUTFILE;

    return;

}

sub OutputBuffer
{

    my ( $buffer ) = @_;

    my $count = &StatsUtils::GetCount( $dbhP );

    my $baseDir = '/deepblue-prep/cgi/stats';
    my $DirName = qq{output$count};
    my $destination = qq{/deepblue-prep/cgi/stats/output$count};

    if ( -d $destination )
      {
	`rm -r $destination`;
      }
    my @args = ("mkdir", "$destination");
    system (@args) == 0 or &errorBail("Could not make destination directory.  Program has terminated");

    my @args = ("chmod", "777", "$destination");
    system (@args) == 0 or &errorBail("Could not grant permissions to destination dir.  Program has terminated");

    my $dataFile = qq{$destination/data};
    &WriteFile ( $dataFile, $buffer );

    #Call Unix to Zip the files
    #`/usr/bin/zip -r $destination . -i $DirName`;
    my @args = ("/usr/bin/zip", "-r", "$destination",  "$destination");
    #my @args = ("/usr/bin/zip", "-r", "$destination",  "$DirName");
    system (@args)  == 0 or &errorBail("Could not zip files.  Program has terminated");
    my $baseFile = $baseDir . '/' . $DirName . '.zip';
    my @args = ("mv", "$baseFile", "$destination");
    system (@args); # == 0 or &errorBail("Could not move base file to destination.  Program has terminated");
    my $ZipFile = $destination . '/' . $DirName . '.zip';

    my $zipFile = qq{/deepblue-prep/cgi/stats/output$count/output$count.zip};
    &OutputZipFile ($zipFile);

    return;

}

sub SetEncoding
{
	my $statement = qq{set client_encoding to 'latin1'};

	my $sth = $dbhP->prepare($statement)
	  or die "Couldn't prepare statement: " . $dbhP->errstr;

	# Read the matching records and print them out
	$sth->execute()             # Execute the query
	  or die "Couldn't execute statement: " . $sth->errstr;
	$sth->finish;
}

sub errorBail
{
    my( $error ) = @_;
    my $s = '';

    $s .= &CGI::start_html( -title => 'DSpace Error Page', -bgcolor => '#FFFFFF', );
    $s .= $error;
    $s .= &CGI::end_html;

    &OutputHtmlPage( \$s );

    exit;
}

sub GetTemplateText
{
    my $defaultFile = shift;

    $defaultFile = qq{$gClassWebDir/$defaultFile};

    open( PAGE, "<$defaultFile" ) || &errorBail("GetTemplateText bailed");

    my $text = join( '', <PAGE> );

    my $SCRIPT_NAME = $ENV{'SCRIPT_NAME'} ? $ENV{'SCRIPT_NAME'} : 'DEBUGGING_SCRIPT_NAME';

    $text =~ s,\$SCRIPT_NAME,$SCRIPT_NAME,g;

    close ( PAGE );

    return $text;
}





__END__;



